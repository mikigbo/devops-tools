import json
import sys

def process_vulnerability_report(report_file, whitelist):
    with open(report_file, "r") as f:
        report_data = json.load(f)

    # Print the JSON data
    print(json.dumps(report_data, indent=2))

    total_vulnerabilities = 0
    vulnerabilities = []
    severity_counts = {"LOW": 0, "MEDIUM": 0, "HIGH": 0}

    for result in report_data.get("results", []):
        vulnerabilities.extend(result.get("vulnerabilities", []))
    
    total_vulnerabilities = len(vulnerabilities)

    whitelisted_count = 0

    for vuln in vulnerabilities:
        vuln_id = vuln.get("vulnerabilityID", "")
        severity = vuln.get("severity", "")

        # Count severity occurrences
        if severity in severity_counts:
            severity_counts[severity] += 1

        # Print details of each vulnerability
        print(f"Processing vulnerability: {vuln_id} (Severity: {severity})")

        if vuln_id in whitelist and severity == whitelist[vuln_id]:
            whitelisted_count += 1

    # Print the counts of each severity level
    print("Severity Counts:")
    for level, count in severity_counts.items():
        print(f"{level}: {count}")

    if whitelisted_count == total_vulnerabilities:
        print("Vulnerability check passed. All vulnerabilities are whitelisted.")
        return True
    else:
        print("Vulnerability check failed. Non-whitelisted vulnerabilities found.")
        return False

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python script.py path/to/report.json")
        sys.exit(1)
    
    report_file = sys.argv[1]
    
    # Example whitelist of vulnerabilities to exempt
    whitelist = {
        "CVE-2021-1234": "LOW",
        "CVE-2022-5678": "MEDIUM",
    }

    if process_vulnerability_report(report_file, whitelist):
        sys.exit(0)  # Success exit code
    else:
        sys.exit(1)  # Failure exit code
